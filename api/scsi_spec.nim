 {.deadCodeElim: on.}
when defined(windows):
  const
    libspdk* = "libspdk.dll"
elif defined(macosx):
  const
    libspdk* = "libspdk.dylib"
else:
  const
    libspdk* = "libspdk.so"
## -
##    BSD LICENSE
##
##    Copyright (c) Intel Corporation.
##    All rights reserved.
##
##    Redistribution and use in source and binary forms, with or without
##    modification, are permitted provided that the following conditions
##    are met:
##
##      * Redistributions of source code must retain the above copyright
##        notice, this list of conditions and the following disclaimer.
##      * Redistributions in binary form must reproduce the above copyright
##        notice, this list of conditions and the following disclaimer in
##        the documentation and/or other materials provided with the
##        distribution.
##      * Neither the name of Intel Corporation nor the names of its
##        contributors may be used to endorse or promote products derived
##        from this software without specific prior written permission.
##
##    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
##    "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
##    LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
##    A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
##    OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
##    SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
##    LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
##    DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
##    THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
##    (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
##    OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
##
## *
##  \file
##  SCSI specification definitions
##

type
  spdk_scsi_group_code* {.size: sizeof(cint).} = enum
    SPDK_SCSI_6BYTE_CMD = 0x00000000, SPDK_SCSI_10BYTE_CMD = 0x00000020,
    SPDK_SCSI_10BYTE_CMD2 = 0x00000040, SPDK_SCSI_16BYTE_CMD = 0x00000080,
    SPDK_SCSI_12BYTE_CMD = 0x000000A0


const
  SPDK_SCSI_GROUP_MASK* = 0x000000E0
  SPDK_SCSI_OPCODE_MASK* = 0x0000001F

type
  spdk_scsi_status* {.size: sizeof(cint).} = enum
    SPDK_SCSI_STATUS_GOOD = 0x00000000,
    SPDK_SCSI_STATUS_CHECK_CONDITION = 0x00000002,
    SPDK_SCSI_STATUS_CONDITION_MET = 0x00000004,
    SPDK_SCSI_STATUS_BUSY = 0x00000008, SPDK_SCSI_STATUS_INTERMEDIATE = 0x00000010,
    SPDK_SCSI_STATUS_INTERMEDIATE_CONDITION_MET = 0x00000014,
    SPDK_SCSI_STATUS_RESERVATION_CONFLICT = 0x00000018,
    SPDK_SCSI_STATUS_Obsolete = 0x00000022,
    SPDK_SCSI_STATUS_TASK_SET_FULL = 0x00000028,
    SPDK_SCSI_STATUS_ACA_ACTIVE = 0x00000030,
    SPDK_SCSI_STATUS_TASK_ABORTED = 0x00000040


type
  spdk_scsi_sense* {.size: sizeof(cint).} = enum
    SPDK_SCSI_SENSE_NO_SENSE = 0x00000000,
    SPDK_SCSI_SENSE_RECOVERED_ERROR = 0x00000001,
    SPDK_SCSI_SENSE_NOT_READY = 0x00000002,
    SPDK_SCSI_SENSE_MEDIUM_ERROR = 0x00000003,
    SPDK_SCSI_SENSE_HARDWARE_ERROR = 0x00000004,
    SPDK_SCSI_SENSE_ILLEGAL_REQUEST = 0x00000005,
    SPDK_SCSI_SENSE_UNIT_ATTENTION = 0x00000006,
    SPDK_SCSI_SENSE_DATA_PROTECT = 0x00000007,
    SPDK_SCSI_SENSE_BLANK_CHECK = 0x00000008,
    SPDK_SCSI_SENSE_VENDOR_SPECIFIC = 0x00000009,
    SPDK_SCSI_SENSE_COPY_ABORTED = 0x0000000A,
    SPDK_SCSI_SENSE_ABORTED_COMMAND = 0x0000000B,
    SPDK_SCSI_SENSE_VOLUME_OVERFLOW = 0x0000000D,
    SPDK_SCSI_SENSE_MISCOMPARE = 0x0000000E


type
  spdk_spc_opcode* {.size: sizeof(cint).} = enum ##  SPC3 related
    SPDK_SPC_TEST_UNIT_READY = 0x00000000, SPDK_SPC_REQUEST_SENSE = 0x00000003,
    SPDK_SPC_MI_REPORT_DEVICE_IDENTIFIER = 0x00000005,
    SPDK_SPC_MO_SET_DEVICE_IDENTIFIER = 0x00000006,
    SPDK_SPC_MO_SET_TARGET_PORT_GROUPS = 0x0000000A,
    SPDK_SPC_MO_CHANGE_ALIASES = 0x0000000B,
    SPDK_SPC_MI_REPORT_SUPPORTED_OPERATION_CODES = 0x0000000C,
    SPDK_SPC_MI_REPORT_SUPPORTED_TASK_MANAGEMENT_FUNCTIONS = 0x0000000D,
    SPDK_SPC_MO_SET_PRIORITY = 0x0000000E, SPDK_SPC_MO_SET_TIMESTAMP = 0x0000000F,
    SPDK_SPC_INQUIRY = 0x00000012, SPDK_SPC_MODE_SELECT_6 = 0x00000015,
    SPDK_SPC2_RESERVE_6 = 0x00000016, SPDK_SPC2_RELEASE_6 = 0x00000017,
    SPDK_SPC_MODE_SENSE_6 = 0x0000001A,
    SPDK_SPC_RECEIVE_DIAGNOSTIC_RESULTS = 0x0000001C,
    SPDK_SPC_SEND_DIAGNOSTIC = 0x0000001D,
    SPDK_SPC_PREVENT_ALLOW_MEDIUM_REMOVAL = 0x0000001E,
    SPDK_SPC_WRITE_BUFFER = 0x0000003B, SPDK_SPC_READ_BUFFER = 0x0000003C,
    SPDK_SPC_LOG_SELECT = 0x0000004C, SPDK_SPC_LOG_SENSE = 0x0000004D,
    SPDK_SPC_MODE_SELECT_10 = 0x00000055, SPDK_SPC2_RESERVE_10 = 0x00000056,
    SPDK_SPC2_RELEASE_10 = 0x00000057, SPDK_SPC_MODE_SENSE_10 = 0x0000005A,
    SPDK_SPC_PERSISTENT_RESERVE_IN = 0x0000005E,
    SPDK_SPC_PERSISTENT_RESERVE_OUT = 0x0000005F,
    SPDK_SPC_VARIABLE_LENGTH = 0x0000007F, SPDK_SPC_EXTENDED_COPY = 0x00000083,
    SPDK_SPC_RECEIVE_COPY_RESULTS = 0x00000084,
    SPDK_SPC_ACCESS_CONTROL_IN = 0x00000086,
    SPDK_SPC_ACCESS_CONTROL_OUT = 0x00000087, SPDK_SPC_READ_ATTRIBUTE = 0x0000008C,
    SPDK_SPC_WRITE_ATTRIBUTE = 0x0000008D,
    SPDK_SPC_SERVICE_ACTION_IN_16 = 0x0000009E,
    SPDK_SPC_SERVICE_ACTION_OUT_16 = 0x0000009F, SPDK_SPC_REPORT_LUNS = 0x000000A0,
    SPDK_SPC_SERVICE_ACTION_OUT_12 = 0x000000A9,
    SPDK_SPC_SERVICE_ACTION_IN_12 = 0x000000AB

const
  SPDK_SPC_MI_REPORT_TARGET_PORT_GROUPS = SPDK_SPC_MO_SET_TARGET_PORT_GROUPS
  SPDK_SPC_MI_REPORT_ALIASES = SPDK_SPC_MO_CHANGE_ALIASES
  SPDK_SPC_MI_REPORT_PRIORITY = SPDK_SPC_MO_SET_PRIORITY
  SPDK_SPC_MI_REPORT_TIMESTAMP = SPDK_SPC_MO_SET_TIMESTAMP

type
  spdk_scc_opcode* {.size: sizeof(cint).} = enum
    SPDK_SCC_MAINTENANCE_IN = 0x000000A3, SPDK_SCC_MAINTENANCE_OUT = 0x000000A4


type
  spdk_sbc_opcode* {.size: sizeof(cint).} = enum
    SPDK_SBC_VL_XDREAD_32 = 0x00000003, SPDK_SBC_FORMAT_UNIT = 0x00000004,
    SPDK_SBC_VL_XPWRITE_32 = 0x00000006, SPDK_SBC_REASSIGN_BLOCKS = 0x00000007,
    SPDK_SBC_READ_6 = 0x00000008, SPDK_SBC_VL_READ_32 = 0x00000009,
    SPDK_SBC_WRITE_6 = 0x0000000A, SPDK_SBC_VL_WRITE_32 = 0x0000000B,
    SPDK_SBC_VL_WRITE_AND_VERIFY_32 = 0x0000000C,
    SPDK_SBC_VL_WRITE_SAME_32 = 0x0000000D,
    SPDK_SBC_SAI_READ_CAPACITY_16 = 0x00000010,
    SPDK_SBC_SAI_READ_LONG_16 = 0x00000011, SPDK_SBC_START_STOP_UNIT = 0x0000001B,
    SPDK_SBC_READ_CAPACITY_10 = 0x00000025, SPDK_SBC_READ_10 = 0x00000028,
    SPDK_SBC_WRITE_10 = 0x0000002A, SPDK_SBC_WRITE_AND_VERIFY_10 = 0x0000002E,
    SPDK_SBC_VERIFY_10 = 0x0000002F, SPDK_SBC_PRE_FETCH_10 = 0x00000034,
    SPDK_SBC_SYNCHRONIZE_CACHE_10 = 0x00000035,
    SPDK_SBC_READ_DEFECT_DATA_10 = 0x00000037, SPDK_SBC_READ_BUFFER = 0x0000003C,
    SPDK_SBC_READ_LONG_10 = 0x0000003E, SPDK_SBC_WRITE_LONG_10 = 0x0000003F,
    SPDK_SBC_WRITE_SAME_10 = 0x00000041, SPDK_SBC_UNMAP = 0x00000042,
    SPDK_SBC_SANITIZE = 0x00000048, SPDK_SBC_XDWRITE_10 = 0x00000050,
    SPDK_SBC_XPWRITE_10 = 0x00000051, SPDK_SBC_XDREAD_10 = 0x00000052,
    SPDK_SBC_XDWRITEREAD_10 = 0x00000053, SPDK_SBC_READ_16 = 0x00000088,
    SPDK_SBC_COMPARE_AND_WRITE = 0x00000089, SPDK_SBC_WRITE_16 = 0x0000008A,
    SPDK_SBC_ORWRITE_16 = 0x0000008B, SPDK_SBC_READ_ATTRIBUTE = 0x0000008C,
    SPDK_SBC_WRITE_AND_VERIFY_16 = 0x0000008E, SPDK_SBC_VERIFY_16 = 0x0000008F,
    SPDK_SBC_PRE_FETCH_16 = 0x00000090, SPDK_SBC_SYNCHRONIZE_CACHE_16 = 0x00000091,
    SPDK_SBC_WRITE_SAME_16 = 0x00000093, SPDK_SBC_READ_12 = 0x000000A8,
    SPDK_SBC_WRITE_12 = 0x000000AA, SPDK_SBC_WRITE_AND_VERIFY_12 = 0x000000AE,
    SPDK_SBC_VERIFY_12 = 0x000000AF, SPDK_SBC_READ_DEFECT_DATA_12 = 0x000000B7,
    SPDK_SBC_GET_LBA_STATUS = 0x0012009E

const
  SPDK_SBC_VL_XDWRITE_32 = SPDK_SBC_FORMAT_UNIT
  SPDK_SBC_VL_XDWRITEREAD_32 = SPDK_SBC_REASSIGN_BLOCKS
  SPDK_SBC_VL_VERIFY_32 = SPDK_SBC_WRITE_6
  SPDK_SBC_SAO_WRITE_LONG_16 = SPDK_SBC_SAI_READ_LONG_16

type
  spdk_mmc_opcode* {.size: sizeof(cint).} = enum ##  MMC6
    SPDK_MMC_TEST_UNIT_READY = 0x00000000, SPDK_MMC_REQUEST_SENSE = 0x00000003,
    SPDK_MMC_FORMAT_UNIT = 0x00000004, SPDK_MMC_INQUIRY = 0x00000012,
    SPDK_MMC_START_STOP_UNIT = 0x0000001B,
    SPDK_MMC_PREVENT_ALLOW_MEDIUM_REMOVAL = 0x0000001E,
    SPDK_MMC_READ_FORMAT_CAPACITIES = 0x00000023,
    SPDK_MMC_READ_CAPACITY = 0x00000025, SPDK_MMC_READ_10 = 0x00000028,
    SPDK_MMC_SEEK_10 = 0x0000002B, SPDK_MMC_ERASE_10 = 0x0000002C,
    SPDK_MMC_WRITE_AND_VERIFY_10 = 0x0000002E, SPDK_MMC_VERIFY_10 = 0x0000002F,
    SPDK_MMC_SYNCHRONIZE_CACHE = 0x00000035, SPDK_MMC_WRITE_BUFFER = 0x0000003B,
    SPDK_MMC_READ_BUFFER = 0x0000003C, SPDK_MMC_READ_SUB_CHANNEL = 0x00000042,
    SPDK_MMC_READ_TOC_PMA_ATIP = 0x00000043, SPDK_MMC_PLAY_AUDIO_10 = 0x00000045,
    SPDK_MMC_GET_CONFIGURATION = 0x00000046, SPDK_MMC_PLAY_AUDIO_MSF = 0x00000047,
    SPDK_MMC_GET_EVENT_STATUS_NOTIFICATION = 0x0000004A,
    SPDK_MMC_PAUSE_RESUME = 0x0000004B, SPDK_MMC_STOP_PLAY_SCAN = 0x0000004E,
    SPDK_MMC_READ_DISC_INFORMATION = 0x00000051,
    SPDK_MMC_READ_TRACK_INFORMATION = 0x00000052,
    SPDK_MMC_RESERVE_TRACK = 0x00000053,
    SPDK_MMC_SEND_OPC_INFORMATION = 0x00000054,
    SPDK_MMC_MODE_SELECT_10 = 0x00000055, SPDK_MMC_REPAIR_TRACK = 0x00000058,
    SPDK_MMC_MODE_SENSE_10 = 0x0000005A, SPDK_MMC_CLOSE_TRACK_SESSION = 0x0000005B,
    SPDK_MMC_READ_BUFFER_CAPACITY = 0x0000005C,
    SPDK_MMC_SEND_CUE_SHEET = 0x0000005D, SPDK_MMC_BLANK = 0x000000A1,
    SPDK_MMC_WRITE_10 = 0x000000A2, SPDK_MMC_SEND_KEY = 0x000000A3,
    SPDK_MMC_REPORT_KEY = 0x000000A4, SPDK_MMC_PLAY_AUDIO_12 = 0x000000A5,
    SPDK_MMC_LOAD_UNLOAD_MEDIUM = 0x000000A6, SPDK_MMC_SET_READ_AHEAD = 0x000000A7,
    SPDK_MMC_READ_12 = 0x000000A8, SPDK_MMC_WRITE_12 = 0x000000AA,
    SPDK_MMC_GET_PERFORMANCE = 0x000000AC, SPDK_MMC_READ_DISC_STRUCTURE = 0x000000AD, ##  MMC4
    SPDK_MMC_SET_STREAMING = 0x000000B6, SPDK_MMC_READ_CD_MSF = 0x000000B9,
    SPDK_MMC_SCAN = 0x000000BA, SPDK_MMC_SET_CD_SPEED = 0x000000BB,
    SPDK_MMC_MECHANISM_STATUS = 0x000000BD, SPDK_MMC_READ_CD = 0x000000BE,
    SPDK_MMC_SEND_DVD_STRUCTURE = 0x000000BF

const
  SPDK_MMC_READ_DVD_STRUCTURE = SPDK_MMC_READ_DISC_STRUCTURE

type
  spdk_ssc_opcode* {.size: sizeof(cint).} = enum
    SPDK_SSC_REWIND = 0x00000001, SPDK_SSC_FORMAT_MEDIUM = 0x00000004,
    SPDK_SSC_READ_BLOCK_LIMITS = 0x00000005, SPDK_SSC_READ_6 = 0x00000008,
    SPDK_SSC_WRITE_6 = 0x0000000A, SPDK_SSC_SET_CAPACITY = 0x0000000B,
    SPDK_SSC_READ_REVERSE_6 = 0x0000000F, SPDK_SSC_WRITE_FILEMARKS_6 = 0x00000010,
    SPDK_SSC_SPACE_6 = 0x00000011, SPDK_SSC_VERIFY_6 = 0x00000013,
    SPDK_SSC_RECOVER_BUFFERED_DATA = 0x00000014, SPDK_SSC_ERASE_6 = 0x00000019,
    SPDK_SSC_LOAD_UNLOAD = 0x0000001B, SPDK_SSC_LOCATE_10 = 0x0000002B,
    SPDK_SSC_READ_POSITION = 0x00000034,
    SPDK_SSC_REPORT_DENSITY_SUPPORT = 0x00000044, SPDK_SSC_SPACE_16 = 0x00000091,
    SPDK_SSC_LOCATE_16 = 0x00000092, SPDK_SSC_MOVE_MEDIUM_ATTACHED = 0x000000A7,
    SPDK_SSC_READ_ELEMENT_STATUS_ATTACHED = 0x000000B4


type
  spdk_spc_vpd* {.size: sizeof(cint).} = enum
    SPDK_SPC_VPD_SUPPORTED_VPD_PAGES = 0x00000000,
    SPDK_SPC_VPD_UNIT_SERIAL_NUMBER = 0x00000080,
    SPDK_SPC_VPD_DEVICE_IDENTIFICATION = 0x00000083,
    SPDK_SPC_VPD_SOFTWARE_INTERFACE_IDENTIFICATION = 0x00000084,
    SPDK_SPC_VPD_MANAGEMENT_NETWORK_ADDRESSES = 0x00000085,
    SPDK_SPC_VPD_EXTENDED_INQUIRY_DATA = 0x00000086,
    SPDK_SPC_VPD_MODE_PAGE_POLICY = 0x00000087,
    SPDK_SPC_VPD_SCSI_PORTS = 0x00000088, SPDK_SPC_VPD_BLOCK_LIMITS = 0x000000B0,
    SPDK_SPC_VPD_BLOCK_DEV_CHARS = 0x000000B1,
    SPDK_SPC_VPD_BLOCK_THIN_PROVISION = 0x000000B2


const
  SPDK_SPC_PERIPHERAL_DEVICE_TYPE_DISK* = 0x00000000
  SPDK_SPC_PERIPHERAL_DEVICE_TYPE_TAPE* = 0x00000001
  SPDK_SPC_PERIPHERAL_DEVICE_TYPE_DVD* = 0x00000005
  SPDK_SPC_PERIPHERAL_DEVICE_TYPE_CHANGER* = 0x00000008
  SPDK_SPC_VERSION_NONE* = 0x00000000
  SPDK_SPC_VERSION_SPC* = 0x00000003
  SPDK_SPC_VERSION_SPC2* = 0x00000004
  SPDK_SPC_VERSION_SPC3* = 0x00000005
  SPDK_SPC_VERSION_SPC4* = 0x00000006
  SPDK_SPC_PROTOCOL_IDENTIFIER_FC* = 0x00000000
  SPDK_SPC_PROTOCOL_IDENTIFIER_PSCSI* = 0x00000001
  SPDK_SPC_PROTOCOL_IDENTIFIER_SSA* = 0x00000002
  SPDK_SPC_PROTOCOL_IDENTIFIER_IEEE1394* = 0x00000003
  SPDK_SPC_PROTOCOL_IDENTIFIER_RDMA* = 0x00000004
  SPDK_SPC_PROTOCOL_IDENTIFIER_ISCSI* = 0x00000005
  SPDK_SPC_PROTOCOL_IDENTIFIER_SAS* = 0x00000006
  SPDK_SPC_PROTOCOL_IDENTIFIER_ADT* = 0x00000007
  SPDK_SPC_PROTOCOL_IDENTIFIER_ATA* = 0x00000008
  SPDK_SPC_VPD_CODE_SET_BINARY* = 0x00000001
  SPDK_SPC_VPD_CODE_SET_ASCII* = 0x00000002
  SPDK_SPC_VPD_CODE_SET_UTF8* = 0x00000003
  SPDK_SPC_VPD_ASSOCIATION_LOGICAL_UNIT* = 0x00000000
  SPDK_SPC_VPD_ASSOCIATION_TARGET_PORT* = 0x00000001
  SPDK_SPC_VPD_ASSOCIATION_TARGET_DEVICE* = 0x00000002
  SPDK_SPC_VPD_IDENTIFIER_TYPE_VENDOR_SPECIFIC* = 0x00000000
  SPDK_SPC_VPD_IDENTIFIER_TYPE_T10_VENDOR_ID* = 0x00000001
  SPDK_SPC_VPD_IDENTIFIER_TYPE_EUI64* = 0x00000002
  SPDK_SPC_VPD_IDENTIFIER_TYPE_NAA* = 0x00000003
  SPDK_SPC_VPD_IDENTIFIER_TYPE_RELATIVE_TARGET_PORT* = 0x00000004
  SPDK_SPC_VPD_IDENTIFIER_TYPE_TARGET_PORT_GROUP* = 0x00000005
  SPDK_SPC_VPD_IDENTIFIER_TYPE_LOGICAL_UNIT_GROUP* = 0x00000006
  SPDK_SPC_VPD_IDENTIFIER_TYPE_MD5_LOGICAL_UNIT* = 0x00000007
  SPDK_SPC_VPD_IDENTIFIER_TYPE_SCSI_NAME* = 0x00000008

type
  spdk_scsi_cdb_inquiry* = object
    opcode*: uint8
    evpd*: uint8
    page_code*: uint8
    alloc_len*: array[2, uint8]
    control*: uint8


assert(sizeof(spdk_scsi_cdb_inquiry) == 6, "incorrect CDB size")
type
  spdk_scsi_cdb_inquiry_data* = object
    peripheral*: uint8
    rmb*: uint8
    version*: uint8
    response*: uint8
    add_len*: uint8
    flags*: uint8
    flags2*: uint8
    flags3*: uint8
    t10_vendor_id*: array[8, uint8]
    product_id*: array[16, uint8]
    product_rev*: array[4, uint8]
    vendor*: array[20, uint8]
    ius*: uint8
    reserved*: uint8
    desc*: ptr uint8

  spdk_scsi_vpd_page* = object
    peripheral*: uint8
    page_code*: uint8
    alloc_len*: array[2, uint8]
    params*: ptr uint8


const
  SPDK_SCSI_VEXT_REF_CHK* = 0x00000001
  SPDK_SCSI_VEXT_APP_CHK* = 0x00000002
  SPDK_SCSI_VEXT_GRD_CHK* = 0x00000004
  SPDK_SCSI_VEXT_SIMPSUP* = 0x00000001
  SPDK_SCSI_VEXT_ORDSUP* = 0x00000002
  SPDK_SCSI_VEXT_HEADSUP* = 0x00000004
  SPDK_SCSI_VEXT_PRIOR_SUP* = 0x00000008
  SPDK_SCSI_VEXT_GROUP_SUP* = 0x00000010
  SPDK_SCSI_VEXT_UASK_SUP* = 0x00000020
  SPDK_SCSI_VEXT_V_SUP* = 0x00000001
  SPDK_SCSI_VEXT_NV_SUP* = 0x00000002
  SPDK_SCSI_VEXT_CRD_SUP* = 0x00000004
  SPDK_SCSI_VEXT_WU_SUP* = 0x00000008

type
  spdk_scsi_vpd_ext_inquiry* = object
    peripheral*: uint8
    page_code*: uint8
    alloc_len*: array[2, uint8]
    check*: uint8
    sup*: uint8
    sup2*: uint8
    luiclr*: uint8
    cbcs*: uint8
    micro_dl*: uint8
    reserved*: array[54, uint8]


const
  SPDK_SPC_VPD_DESIG_PIV* = 0x00000080

##  designation descriptor

type
  spdk_scsi_desig_desc* = object
    code_set* {.bitsize: 4.}: uint8
    protocol_id* {.bitsize: 4.}: uint8
    `type`* {.bitsize: 4.}: uint8
    association* {.bitsize: 2.}: uint8
    reserved0* {.bitsize: 1.}: uint8
    piv* {.bitsize: 1.}: uint8
    reserved1*: uint8
    len*: uint8
    desig*: ptr uint8


assert(sizeof(spdk_scsi_desig_desc) == 4, "Invalid size")
##  mode page policy descriptor

type
  spdk_scsi_mpage_policy_desc* = object
    page_code*: uint8
    sub_page_code*: uint8
    policy*: uint8
    reserved*: uint8


##  target port descriptor

type
  spdk_scsi_tgt_port_desc* = object
    code_set*: uint8
    desig_type*: uint8
    reserved*: uint8
    len*: uint8
    designator*: ptr uint8


##  SCSI port designation descriptor

type
  spdk_scsi_port_desc* = object
    reserved*: uint16
    rel_port_id*: uint16
    reserved2*: uint16
    init_port_len*: uint16
    init_port_id*: uint16
    reserved3*: uint16
    tgt_desc_len*: uint16
    tgt_desc*: ptr uint8


##  SCSI UNMAP block descriptor

type
  spdk_scsi_unmap_bdesc* = object
    lba*: uint64               ##  UNMAP LOGICAL BLOCK ADDRESS
    ##  NUMBER OF LOGICAL BLOCKS
    block_count*: uint32       ##  RESERVED
    reserved*: uint32


const
  SPDK_SCSI_UNMAP_LBPU* = 1 shl 7
  SPDK_SCSI_UNMAP_LBPWS* = 1 shl 6
  SPDK_SCSI_UNMAP_LBPWS10* = 1 shl 5
  SPDK_SCSI_UNMAP_FULL_PROVISIONING* = 0x00000000
  SPDK_SCSI_UNMAP_RESOURCE_PROVISIONING* = 0x00000001
  SPDK_SCSI_UNMAP_THIN_PROVISIONING* = 0x00000002
